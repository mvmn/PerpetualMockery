/*
 * generated by Xtext 2.25.0
 */
package x.mvmn.permock.dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import x.mvmn.permock.dsl.ide.contentassist.antlr.internal.InternalDslParser;
import x.mvmn.permock.dsl.services.DslGrammarAccess;

public class DslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getRuleAccess().getAlternatives_2(), "rule__Rule__Alternatives_2");
			builder.put(grammarAccess.getOptionalNegationConditionAccess().getAlternatives(), "rule__OptionalNegationCondition__Alternatives");
			builder.put(grammarAccess.getBracketedConditionAccess().getAlternatives(), "rule__BracketedCondition__Alternatives");
			builder.put(grammarAccess.getOperandAccess().getAlternatives(), "rule__Operand__Alternatives");
			builder.put(grammarAccess.getCollectionAccessAccess().getAlternatives_1(), "rule__CollectionAccess__Alternatives_1");
			builder.put(grammarAccess.getPropertyRefAccess().getAlternatives_0(), "rule__PropertyRef__Alternatives_0");
			builder.put(grammarAccess.getConstantAccess().getAlternatives(), "rule__Constant__Alternatives");
			builder.put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
			builder.put(grammarAccess.getListOperationAccess().getAlternatives(), "rule__ListOperation__Alternatives");
			builder.put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
			builder.put(grammarAccess.getRuleAccess().getGroup_2_0(), "rule__Rule__Group_2_0__0");
			builder.put(grammarAccess.getRuleAccess().getGroup_2_1(), "rule__Rule__Group_2_1__0");
			builder.put(grammarAccess.getProxyConfAccess().getGroup(), "rule__ProxyConf__Group__0");
			builder.put(grammarAccess.getResponseConfAccess().getGroup_0(), "rule__ResponseConf__Group_0__0");
			builder.put(grammarAccess.getResponseConfAccess().getGroup_1(), "rule__ResponseConf__Group_1__0");
			builder.put(grammarAccess.getResponseConfAccess().getGroup_2(), "rule__ResponseConf__Group_2__0");
			builder.put(grammarAccess.getHeadersAccess().getGroup(), "rule__Headers__Group__0");
			builder.put(grammarAccess.getHeadersAccess().getGroup_1(), "rule__Headers__Group_1__0");
			builder.put(grammarAccess.getHeaderAccess().getGroup(), "rule__Header__Group__0");
			builder.put(grammarAccess.getOrConditionAccess().getGroup(), "rule__OrCondition__Group__0");
			builder.put(grammarAccess.getOrConditionAccess().getGroup_1(), "rule__OrCondition__Group_1__0");
			builder.put(grammarAccess.getAndConditionAccess().getGroup(), "rule__AndCondition__Group__0");
			builder.put(grammarAccess.getAndConditionAccess().getGroup_1(), "rule__AndCondition__Group_1__0");
			builder.put(grammarAccess.getOptionalNegationConditionAccess().getGroup_1(), "rule__OptionalNegationCondition__Group_1__0");
			builder.put(grammarAccess.getBracketedConditionAccess().getGroup_1(), "rule__BracketedCondition__Group_1__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
			builder.put(grammarAccess.getListFunctionAccess().getGroup(), "rule__ListFunction__Group__0");
			builder.put(grammarAccess.getReferenceAccess().getGroup(), "rule__Reference__Group__0");
			builder.put(grammarAccess.getListElementReferenceAccess().getGroup(), "rule__ListElementReference__Group__0");
			builder.put(grammarAccess.getCollectionAccessAccess().getGroup(), "rule__CollectionAccess__Group__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup(), "rule__FunctionCall__Group__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup_3(), "rule__FunctionCall__Group_3__0");
			builder.put(grammarAccess.getPropertyRefAccess().getGroup(), "rule__PropertyRef__Group__0");
			builder.put(grammarAccess.getPropertyRefAccess().getGroup_0_0(), "rule__PropertyRef__Group_0_0__0");
			builder.put(grammarAccess.getPropertyRefAccess().getGroup_0_1(), "rule__PropertyRef__Group_0_1__0");
			builder.put(grammarAccess.getRuleAccess().getConditionsAssignment_1(), "rule__Rule__ConditionsAssignment_1");
			builder.put(grammarAccess.getRuleAccess().getProxyAssignment_2_0_1(), "rule__Rule__ProxyAssignment_2_0_1");
			builder.put(grammarAccess.getRuleAccess().getResponseAssignment_2_1_2(), "rule__Rule__ResponseAssignment_2_1_2");
			builder.put(grammarAccess.getProxyConfAccess().getProxyUrlAssignment_1(), "rule__ProxyConf__ProxyUrlAssignment_1");
			builder.put(grammarAccess.getResponseConfAccess().getHttpStatusAssignment_0_1(), "rule__ResponseConf__HttpStatusAssignment_0_1");
			builder.put(grammarAccess.getResponseConfAccess().getContentAssignment_1_1(), "rule__ResponseConf__ContentAssignment_1_1");
			builder.put(grammarAccess.getResponseConfAccess().getHeadersAssignment_2_1(), "rule__ResponseConf__HeadersAssignment_2_1");
			builder.put(grammarAccess.getHeadersAccess().getHeadersAssignment_0(), "rule__Headers__HeadersAssignment_0");
			builder.put(grammarAccess.getHeadersAccess().getHeadersAssignment_1_1(), "rule__Headers__HeadersAssignment_1_1");
			builder.put(grammarAccess.getHeaderAccess().getHeaderNameAssignment_0(), "rule__Header__HeaderNameAssignment_0");
			builder.put(grammarAccess.getHeaderAccess().getHeaderValueAssignment_2(), "rule__Header__HeaderValueAssignment_2");
			builder.put(grammarAccess.getOrConditionAccess().getRightAssignment_1_2(), "rule__OrCondition__RightAssignment_1_2");
			builder.put(grammarAccess.getAndConditionAccess().getRightAssignment_1_2(), "rule__AndCondition__RightAssignment_1_2");
			builder.put(grammarAccess.getOptionalNegationConditionAccess().getNegatedAssignment_1_2(), "rule__OptionalNegationCondition__NegatedAssignment_1_2");
			builder.put(grammarAccess.getBracketedConditionAccess().getExpressionAssignment_0(), "rule__BracketedCondition__ExpressionAssignment_0");
			builder.put(grammarAccess.getBracketedConditionAccess().getConditionAssignment_1_1(), "rule__BracketedCondition__ConditionAssignment_1_1");
			builder.put(grammarAccess.getExpressionAccess().getLeftAssignment_0(), "rule__Expression__LeftAssignment_0");
			builder.put(grammarAccess.getExpressionAccess().getOpAssignment_1_0(), "rule__Expression__OpAssignment_1_0");
			builder.put(grammarAccess.getExpressionAccess().getRightAssignment_1_1(), "rule__Expression__RightAssignment_1_1");
			builder.put(grammarAccess.getOperandAccess().getRefAssignment_0(), "rule__Operand__RefAssignment_0");
			builder.put(grammarAccess.getOperandAccess().getConstAssignment_1(), "rule__Operand__ConstAssignment_1");
			builder.put(grammarAccess.getOperandAccess().getListElementRefAssignment_2(), "rule__Operand__ListElementRefAssignment_2");
			builder.put(grammarAccess.getListFunctionAccess().getOpAssignment_1(), "rule__ListFunction__OpAssignment_1");
			builder.put(grammarAccess.getListFunctionAccess().getAliasAssignment_2(), "rule__ListFunction__AliasAssignment_2");
			builder.put(grammarAccess.getListFunctionAccess().getSeparatorAssignment_3(), "rule__ListFunction__SeparatorAssignment_3");
			builder.put(grammarAccess.getListFunctionAccess().getConditionAssignment_4(), "rule__ListFunction__ConditionAssignment_4");
			builder.put(grammarAccess.getListElementAliasAccess().getNameAssignment(), "rule__ListElementAlias__NameAssignment");
			builder.put(grammarAccess.getReferenceAccess().getNameAssignment_0(), "rule__Reference__NameAssignment_0");
			builder.put(grammarAccess.getReferenceAccess().getPropAssignment_1(), "rule__Reference__PropAssignment_1");
			builder.put(grammarAccess.getListElementReferenceAccess().getNameAssignment_1(), "rule__ListElementReference__NameAssignment_1");
			builder.put(grammarAccess.getListElementReferenceAccess().getPropAssignment_2(), "rule__ListElementReference__PropAssignment_2");
			builder.put(grammarAccess.getCollectionAccessAccess().getKeyAssignment_1_0(), "rule__CollectionAccess__KeyAssignment_1_0");
			builder.put(grammarAccess.getCollectionAccessAccess().getIndexAssignment_1_1(), "rule__CollectionAccess__IndexAssignment_1_1");
			builder.put(grammarAccess.getPropertyAccessAccess().getNameAssignment(), "rule__PropertyAccess__NameAssignment");
			builder.put(grammarAccess.getFunctionCallAccess().getNameAssignment_0(), "rule__FunctionCall__NameAssignment_0");
			builder.put(grammarAccess.getFunctionCallAccess().getFunctionParametersAssignment_2(), "rule__FunctionCall__FunctionParametersAssignment_2");
			builder.put(grammarAccess.getFunctionCallAccess().getFunctionParametersAssignment_3_1(), "rule__FunctionCall__FunctionParametersAssignment_3_1");
			builder.put(grammarAccess.getPropertyRefAccess().getPropAccessAssignment_0_0_1(), "rule__PropertyRef__PropAccessAssignment_0_0_1");
			builder.put(grammarAccess.getPropertyRefAccess().getFunctionCallAssignment_0_1_1(), "rule__PropertyRef__FunctionCallAssignment_0_1_1");
			builder.put(grammarAccess.getPropertyRefAccess().getCollectionAccessAssignment_0_2(), "rule__PropertyRef__CollectionAccessAssignment_0_2");
			builder.put(grammarAccess.getPropertyRefAccess().getListFuncAssignment_0_3(), "rule__PropertyRef__ListFuncAssignment_0_3");
			builder.put(grammarAccess.getPropertyRefAccess().getSubProperyAssignment_1(), "rule__PropertyRef__SubProperyAssignment_1");
			builder.put(grammarAccess.getConstantAccess().getStrValAssignment_0(), "rule__Constant__StrValAssignment_0");
			builder.put(grammarAccess.getConstantAccess().getIntValAssignment_1(), "rule__Constant__IntValAssignment_1");
			builder.put(grammarAccess.getConstantAccess().getFloatValAssignment_2(), "rule__Constant__FloatValAssignment_2");
			builder.put(grammarAccess.getConstantAccess().getBoolValAssignment_3(), "rule__Constant__BoolValAssignment_3");
			builder.put(grammarAccess.getEntityAccess().getNameAssignment(), "rule__Entity__NameAssignment");
			builder.put(grammarAccess.getResponseConfAccess().getUnorderedGroup(), "rule__ResponseConf__UnorderedGroup");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DslGrammarAccess grammarAccess;

	@Override
	protected InternalDslParser createParser() {
		InternalDslParser result = new InternalDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
