/*
 * generated by Xtext 2.25.0
 */
grammar InternalDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package x.mvmn.permock.dsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package x.mvmn.permock.dsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import x.mvmn.permock.dsl.services.DslGrammarAccess;

}
@parser::members {
	private DslGrammarAccess grammarAccess;

	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleRule
entryRuleRule
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleAccess().getGroup()); }
		(rule__Rule__Group__0)
		{ after(grammarAccess.getRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProxyConf
entryRuleProxyConf
:
{ before(grammarAccess.getProxyConfRule()); }
	 ruleProxyConf
{ after(grammarAccess.getProxyConfRule()); } 
	 EOF 
;

// Rule ProxyConf
ruleProxyConf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProxyConfAccess().getGroup()); }
		(rule__ProxyConf__Group__0)
		{ after(grammarAccess.getProxyConfAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleResponseConf
entryRuleResponseConf
:
{ before(grammarAccess.getResponseConfRule()); }
	 ruleResponseConf
{ after(grammarAccess.getResponseConfRule()); } 
	 EOF 
;

// Rule ResponseConf
ruleResponseConf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getResponseConfAccess().getUnorderedGroup()); }
		(rule__ResponseConf__UnorderedGroup)
		{ after(grammarAccess.getResponseConfAccess().getUnorderedGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHeaders
entryRuleHeaders
:
{ before(grammarAccess.getHeadersRule()); }
	 ruleHeaders
{ after(grammarAccess.getHeadersRule()); } 
	 EOF 
;

// Rule Headers
ruleHeaders 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHeadersAccess().getGroup()); }
		(rule__Headers__Group__0)
		{ after(grammarAccess.getHeadersAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHeader
entryRuleHeader
:
{ before(grammarAccess.getHeaderRule()); }
	 ruleHeader
{ after(grammarAccess.getHeaderRule()); } 
	 EOF 
;

// Rule Header
ruleHeader 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHeaderAccess().getGroup()); }
		(rule__Header__Group__0)
		{ after(grammarAccess.getHeaderAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondition
entryRuleCondition
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionAccess().getOrConditionParserRuleCall()); }
		ruleOrCondition
		{ after(grammarAccess.getConditionAccess().getOrConditionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrCondition
entryRuleOrCondition
:
{ before(grammarAccess.getOrConditionRule()); }
	 ruleOrCondition
{ after(grammarAccess.getOrConditionRule()); } 
	 EOF 
;

// Rule OrCondition
ruleOrCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrConditionAccess().getGroup()); }
		(rule__OrCondition__Group__0)
		{ after(grammarAccess.getOrConditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndCondition
entryRuleAndCondition
:
{ before(grammarAccess.getAndConditionRule()); }
	 ruleAndCondition
{ after(grammarAccess.getAndConditionRule()); } 
	 EOF 
;

// Rule AndCondition
ruleAndCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndConditionAccess().getGroup()); }
		(rule__AndCondition__Group__0)
		{ after(grammarAccess.getAndConditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOptionalNegationCondition
entryRuleOptionalNegationCondition
:
{ before(grammarAccess.getOptionalNegationConditionRule()); }
	 ruleOptionalNegationCondition
{ after(grammarAccess.getOptionalNegationConditionRule()); } 
	 EOF 
;

// Rule OptionalNegationCondition
ruleOptionalNegationCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOptionalNegationConditionAccess().getAlternatives()); }
		(rule__OptionalNegationCondition__Alternatives)
		{ after(grammarAccess.getOptionalNegationConditionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBracketedCondition
entryRuleBracketedCondition
:
{ before(grammarAccess.getBracketedConditionRule()); }
	 ruleBracketedCondition
{ after(grammarAccess.getBracketedConditionRule()); } 
	 EOF 
;

// Rule BracketedCondition
ruleBracketedCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBracketedConditionAccess().getAlternatives()); }
		(rule__BracketedCondition__Alternatives)
		{ after(grammarAccess.getBracketedConditionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getGroup()); }
		(rule__Expression__Group__0)
		{ after(grammarAccess.getExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperand
entryRuleOperand
:
{ before(grammarAccess.getOperandRule()); }
	 ruleOperand
{ after(grammarAccess.getOperandRule()); } 
	 EOF 
;

// Rule Operand
ruleOperand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperandAccess().getAlternatives()); }
		(rule__Operand__Alternatives)
		{ after(grammarAccess.getOperandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListFunction
entryRuleListFunction
:
{ before(grammarAccess.getListFunctionRule()); }
	 ruleListFunction
{ after(grammarAccess.getListFunctionRule()); } 
	 EOF 
;

// Rule ListFunction
ruleListFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListFunctionAccess().getGroup()); }
		(rule__ListFunction__Group__0)
		{ after(grammarAccess.getListFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListElementAlias
entryRuleListElementAlias
:
{ before(grammarAccess.getListElementAliasRule()); }
	 ruleListElementAlias
{ after(grammarAccess.getListElementAliasRule()); } 
	 EOF 
;

// Rule ListElementAlias
ruleListElementAlias 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListElementAliasAccess().getNameAssignment()); }
		(rule__ListElementAlias__NameAssignment)
		{ after(grammarAccess.getListElementAliasAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReference
entryRuleReference
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getReferenceRule()); }
	 ruleReference
{ after(grammarAccess.getReferenceRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Reference
ruleReference 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReferenceAccess().getGroup()); }
		(rule__Reference__Group__0)
		{ after(grammarAccess.getReferenceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleListElementReference
entryRuleListElementReference
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getListElementReferenceRule()); }
	 ruleListElementReference
{ after(grammarAccess.getListElementReferenceRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ListElementReference
ruleListElementReference 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListElementReferenceAccess().getGroup()); }
		(rule__ListElementReference__Group__0)
		{ after(grammarAccess.getListElementReferenceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRulePropertyAccess
entryRulePropertyAccess
:
{ before(grammarAccess.getPropertyAccessRule()); }
	 rulePropertyAccess
{ after(grammarAccess.getPropertyAccessRule()); } 
	 EOF 
;

// Rule PropertyAccess
rulePropertyAccess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPropertyAccessAccess().getNameAssignment()); }
		(rule__PropertyAccess__NameAssignment)
		{ after(grammarAccess.getPropertyAccessAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCollectionAccess
entryRuleCollectionAccess
:
{ before(grammarAccess.getCollectionAccessRule()); }
	 ruleCollectionAccess
{ after(grammarAccess.getCollectionAccessRule()); } 
	 EOF 
;

// Rule CollectionAccess
ruleCollectionAccess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCollectionAccessAccess().getGroup()); }
		(rule__CollectionAccess__Group__0)
		{ after(grammarAccess.getCollectionAccessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePropertyRef
entryRulePropertyRef
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getPropertyRefRule()); }
	 rulePropertyRef
{ after(grammarAccess.getPropertyRefRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule PropertyRef
rulePropertyRef 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPropertyRefAccess().getGroup()); }
		(rule__PropertyRef__Group__0)
		{ after(grammarAccess.getPropertyRefAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleConstant
entryRuleConstant
:
{ before(grammarAccess.getConstantRule()); }
	 ruleConstant
{ after(grammarAccess.getConstantRule()); } 
	 EOF 
;

// Rule Constant
ruleConstant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstantAccess().getAlternatives()); }
		(rule__Constant__Alternatives)
		{ after(grammarAccess.getConstantAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEntity
entryRuleEntity
:
{ before(grammarAccess.getEntityRule()); }
	 ruleEntity
{ after(grammarAccess.getEntityRule()); } 
	 EOF 
;

// Rule Entity
ruleEntity 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEntityAccess().getNameAssignment()); }
		(rule__Entity__NameAssignment)
		{ after(grammarAccess.getEntityAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Operator
ruleOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperatorAccess().getAlternatives()); }
		(rule__Operator__Alternatives)
		{ after(grammarAccess.getOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ListOperation
ruleListOperation
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListOperationAccess().getAlternatives()); }
		(rule__ListOperation__Alternatives)
		{ after(grammarAccess.getListOperationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getGroup_2_0()); }
		(rule__Rule__Group_2_0__0)
		{ after(grammarAccess.getRuleAccess().getGroup_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getRuleAccess().getGroup_2_1()); }
		(rule__Rule__Group_2_1__0)
		{ after(grammarAccess.getRuleAccess().getGroup_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptionalNegationCondition__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptionalNegationConditionAccess().getBracketedConditionParserRuleCall_0()); }
		ruleBracketedCondition
		{ after(grammarAccess.getOptionalNegationConditionAccess().getBracketedConditionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getOptionalNegationConditionAccess().getGroup_1()); }
		(rule__OptionalNegationCondition__Group_1__0)
		{ after(grammarAccess.getOptionalNegationConditionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BracketedCondition__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBracketedConditionAccess().getExpressionAssignment_0()); }
		(rule__BracketedCondition__ExpressionAssignment_0)
		{ after(grammarAccess.getBracketedConditionAccess().getExpressionAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getBracketedConditionAccess().getGroup_1()); }
		(rule__BracketedCondition__Group_1__0)
		{ after(grammarAccess.getBracketedConditionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperandAccess().getRefAssignment_0()); }
		(rule__Operand__RefAssignment_0)
		{ after(grammarAccess.getOperandAccess().getRefAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getOperandAccess().getConstAssignment_1()); }
		(rule__Operand__ConstAssignment_1)
		{ after(grammarAccess.getOperandAccess().getConstAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getOperandAccess().getListElementRefAssignment_2()); }
		(rule__Operand__ListElementRefAssignment_2)
		{ after(grammarAccess.getOperandAccess().getListElementRefAssignment_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccess__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCollectionAccessAccess().getKeyAssignment_1_0()); }
		(rule__CollectionAccess__KeyAssignment_1_0)
		{ after(grammarAccess.getCollectionAccessAccess().getKeyAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getCollectionAccessAccess().getIndexAssignment_1_1()); }
		(rule__CollectionAccess__IndexAssignment_1_1)
		{ after(grammarAccess.getCollectionAccessAccess().getIndexAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyRef__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyRefAccess().getGroup_0_0()); }
		(rule__PropertyRef__Group_0_0__0)
		{ after(grammarAccess.getPropertyRefAccess().getGroup_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyRefAccess().getCollectionAccessAssignment_0_1()); }
		(rule__PropertyRef__CollectionAccessAssignment_0_1)
		{ after(grammarAccess.getPropertyRefAccess().getCollectionAccessAssignment_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyRefAccess().getListFuncAssignment_0_2()); }
		(rule__PropertyRef__ListFuncAssignment_0_2)
		{ after(grammarAccess.getPropertyRefAccess().getListFuncAssignment_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantAccess().getStrValAssignment_0()); }
		(rule__Constant__StrValAssignment_0)
		{ after(grammarAccess.getConstantAccess().getStrValAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getConstantAccess().getIntValAssignment_1()); }
		(rule__Constant__IntValAssignment_1)
		{ after(grammarAccess.getConstantAccess().getIntValAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getConstantAccess().getFloatValAssignment_2()); }
		(rule__Constant__FloatValAssignment_2)
		{ after(grammarAccess.getConstantAccess().getFloatValAssignment_2()); }
	)
	|
	(
		{ before(grammarAccess.getConstantAccess().getBoolValAssignment_3()); }
		(rule__Constant__BoolValAssignment_3)
		{ after(grammarAccess.getConstantAccess().getBoolValAssignment_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperatorAccess().getEQEnumLiteralDeclaration_0()); }
		('=')
		{ after(grammarAccess.getOperatorAccess().getEQEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorAccess().getNEQEnumLiteralDeclaration_1()); }
		('!=')
		{ after(grammarAccess.getOperatorAccess().getNEQEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorAccess().getGTEnumLiteralDeclaration_2()); }
		('>')
		{ after(grammarAccess.getOperatorAccess().getGTEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorAccess().getGTEQEnumLiteralDeclaration_3()); }
		('>=')
		{ after(grammarAccess.getOperatorAccess().getGTEQEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorAccess().getLTEnumLiteralDeclaration_4()); }
		('<')
		{ after(grammarAccess.getOperatorAccess().getLTEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorAccess().getLTEQEnumLiteralDeclaration_5()); }
		('<=')
		{ after(grammarAccess.getOperatorAccess().getLTEQEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorAccess().getREGEXEnumLiteralDeclaration_6()); }
		('~=')
		{ after(grammarAccess.getOperatorAccess().getREGEXEnumLiteralDeclaration_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOperation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListOperationAccess().getFILTEREnumLiteralDeclaration_0()); }
		('where')
		{ after(grammarAccess.getListOperationAccess().getFILTEREnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getListOperationAccess().getALLEnumLiteralDeclaration_1()); }
		('all')
		{ after(grammarAccess.getListOperationAccess().getALLEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getListOperationAccess().getANYEnumLiteralDeclaration_2()); }
		('any')
		{ after(grammarAccess.getListOperationAccess().getANYEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getRuleAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__1__Impl
	rule__Rule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getConditionsAssignment_1()); }
	(rule__Rule__ConditionsAssignment_1)
	{ after(grammarAccess.getRuleAccess().getConditionsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getAlternatives_2()); }
	(rule__Rule__Alternatives_2)?
	{ after(grammarAccess.getRuleAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group_2_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group_2_0__0__Impl
	rule__Rule__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_2_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getProxyKeyword_2_0_0()); }
	'proxy'
	{ after(grammarAccess.getRuleAccess().getProxyKeyword_2_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_2_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group_2_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_2_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getProxyAssignment_2_0_1()); }
	(rule__Rule__ProxyAssignment_2_0_1)
	{ after(grammarAccess.getRuleAccess().getProxyAssignment_2_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group_2_1__0__Impl
	rule__Rule__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getRespondKeyword_2_1_0()); }
	'respond'
	{ after(grammarAccess.getRuleAccess().getRespondKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group_2_1__1__Impl
	rule__Rule__Group_2_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getWithKeyword_2_1_1()); }
	'with'
	{ after(grammarAccess.getRuleAccess().getWithKeyword_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_2_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group_2_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_2_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getResponseAssignment_2_1_2()); }
	(rule__Rule__ResponseAssignment_2_1_2)
	{ after(grammarAccess.getRuleAccess().getResponseAssignment_2_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProxyConf__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProxyConf__Group__0__Impl
	rule__ProxyConf__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxyConf__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProxyConfAccess().getUrlKeyword_0()); }
	'url'
	{ after(grammarAccess.getProxyConfAccess().getUrlKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxyConf__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProxyConf__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxyConf__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProxyConfAccess().getProxyUrlAssignment_1()); }
	(rule__ProxyConf__ProxyUrlAssignment_1)
	{ after(grammarAccess.getProxyConfAccess().getProxyUrlAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ResponseConf__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ResponseConf__Group_0__0__Impl
	rule__ResponseConf__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ResponseConf__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResponseConfAccess().getStatusKeyword_0_0()); }
	'status'
	{ after(grammarAccess.getResponseConfAccess().getStatusKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ResponseConf__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ResponseConf__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ResponseConf__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResponseConfAccess().getHttpStatusAssignment_0_1()); }
	(rule__ResponseConf__HttpStatusAssignment_0_1)
	{ after(grammarAccess.getResponseConfAccess().getHttpStatusAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ResponseConf__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ResponseConf__Group_1__0__Impl
	rule__ResponseConf__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ResponseConf__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResponseConfAccess().getContentKeyword_1_0()); }
	'content'
	{ after(grammarAccess.getResponseConfAccess().getContentKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ResponseConf__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ResponseConf__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ResponseConf__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResponseConfAccess().getContentAssignment_1_1()); }
	(rule__ResponseConf__ContentAssignment_1_1)
	{ after(grammarAccess.getResponseConfAccess().getContentAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ResponseConf__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ResponseConf__Group_2__0__Impl
	rule__ResponseConf__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ResponseConf__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResponseConfAccess().getHeadersKeyword_2_0()); }
	'headers'
	{ after(grammarAccess.getResponseConfAccess().getHeadersKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ResponseConf__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ResponseConf__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ResponseConf__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResponseConfAccess().getHeadersAssignment_2_1()); }
	(rule__ResponseConf__HeadersAssignment_2_1)?
	{ after(grammarAccess.getResponseConfAccess().getHeadersAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Headers__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Headers__Group__0__Impl
	rule__Headers__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Headers__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeadersAccess().getHeadersAssignment_0()); }
	(rule__Headers__HeadersAssignment_0)
	{ after(grammarAccess.getHeadersAccess().getHeadersAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Headers__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Headers__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Headers__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeadersAccess().getGroup_1()); }
	(rule__Headers__Group_1__0)*
	{ after(grammarAccess.getHeadersAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Headers__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Headers__Group_1__0__Impl
	rule__Headers__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Headers__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeadersAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getHeadersAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Headers__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Headers__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Headers__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeadersAccess().getHeadersAssignment_1_1()); }
	(rule__Headers__HeadersAssignment_1_1)
	{ after(grammarAccess.getHeadersAccess().getHeadersAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Header__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Header__Group__0__Impl
	rule__Header__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeaderAccess().getHeaderNameAssignment_0()); }
	(rule__Header__HeaderNameAssignment_0)
	{ after(grammarAccess.getHeaderAccess().getHeaderNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Header__Group__1__Impl
	rule__Header__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeaderAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getHeaderAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Header__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeaderAccess().getHeaderValueAssignment_2()); }
	(rule__Header__HeaderValueAssignment_2)
	{ after(grammarAccess.getHeaderAccess().getHeaderValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrCondition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrCondition__Group__0__Impl
	rule__OrCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrCondition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrConditionAccess().getAndConditionParserRuleCall_0()); }
	ruleAndCondition
	{ after(grammarAccess.getOrConditionAccess().getAndConditionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrCondition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrCondition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrCondition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrConditionAccess().getGroup_1()); }
	(rule__OrCondition__Group_1__0)*
	{ after(grammarAccess.getOrConditionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrCondition__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrCondition__Group_1__0__Impl
	rule__OrCondition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrCondition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrConditionAccess().getOrConditionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getOrConditionAccess().getOrConditionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrCondition__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrCondition__Group_1__1__Impl
	rule__OrCondition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrCondition__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrConditionAccess().getOrKeyword_1_1()); }
	'or'
	{ after(grammarAccess.getOrConditionAccess().getOrKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrCondition__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrCondition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrCondition__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrConditionAccess().getRightAssignment_1_2()); }
	(rule__OrCondition__RightAssignment_1_2)
	{ after(grammarAccess.getOrConditionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndCondition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndCondition__Group__0__Impl
	rule__AndCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndCondition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndConditionAccess().getOptionalNegationConditionParserRuleCall_0()); }
	ruleOptionalNegationCondition
	{ after(grammarAccess.getAndConditionAccess().getOptionalNegationConditionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndCondition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndCondition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndCondition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndConditionAccess().getGroup_1()); }
	(rule__AndCondition__Group_1__0)*
	{ after(grammarAccess.getAndConditionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndCondition__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndCondition__Group_1__0__Impl
	rule__AndCondition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndCondition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndConditionAccess().getAndConditionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAndConditionAccess().getAndConditionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndCondition__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndCondition__Group_1__1__Impl
	rule__AndCondition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndCondition__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndConditionAccess().getAndKeyword_1_1()); }
	'and'
	{ after(grammarAccess.getAndConditionAccess().getAndKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndCondition__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndCondition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndCondition__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndConditionAccess().getRightAssignment_1_2()); }
	(rule__AndCondition__RightAssignment_1_2)
	{ after(grammarAccess.getAndConditionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OptionalNegationCondition__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptionalNegationCondition__Group_1__0__Impl
	rule__OptionalNegationCondition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OptionalNegationCondition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptionalNegationConditionAccess().getNegationAction_1_0()); }
	()
	{ after(grammarAccess.getOptionalNegationConditionAccess().getNegationAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptionalNegationCondition__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptionalNegationCondition__Group_1__1__Impl
	rule__OptionalNegationCondition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OptionalNegationCondition__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptionalNegationConditionAccess().getNotKeyword_1_1()); }
	'not'
	{ after(grammarAccess.getOptionalNegationConditionAccess().getNotKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptionalNegationCondition__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptionalNegationCondition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OptionalNegationCondition__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptionalNegationConditionAccess().getNegatedAssignment_1_2()); }
	(rule__OptionalNegationCondition__NegatedAssignment_1_2)
	{ after(grammarAccess.getOptionalNegationConditionAccess().getNegatedAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BracketedCondition__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BracketedCondition__Group_1__0__Impl
	rule__BracketedCondition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BracketedCondition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBracketedConditionAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getBracketedConditionAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BracketedCondition__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BracketedCondition__Group_1__1__Impl
	rule__BracketedCondition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BracketedCondition__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBracketedConditionAccess().getConditionAssignment_1_1()); }
	(rule__BracketedCondition__ConditionAssignment_1_1)
	{ after(grammarAccess.getBracketedConditionAccess().getConditionAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BracketedCondition__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BracketedCondition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BracketedCondition__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBracketedConditionAccess().getRightParenthesisKeyword_1_2()); }
	')'
	{ after(grammarAccess.getBracketedConditionAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getLeftAssignment_0()); }
	(rule__Expression__LeftAssignment_0)
	{ after(grammarAccess.getExpressionAccess().getLeftAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getGroup_1()); }
	(rule__Expression__Group_1__0)?
	{ after(grammarAccess.getExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__0__Impl
	rule__Expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getOpAssignment_1_0()); }
	(rule__Expression__OpAssignment_1_0)
	{ after(grammarAccess.getExpressionAccess().getOpAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getRightAssignment_1_1()); }
	(rule__Expression__RightAssignment_1_1)
	{ after(grammarAccess.getExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListFunction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListFunction__Group__0__Impl
	rule__ListFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListFunction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListFunctionAccess().getLeftCurlyBracketKeyword_0()); }
	'{'
	{ after(grammarAccess.getListFunctionAccess().getLeftCurlyBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListFunction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListFunction__Group__1__Impl
	rule__ListFunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListFunction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListFunctionAccess().getOpAssignment_1()); }
	(rule__ListFunction__OpAssignment_1)
	{ after(grammarAccess.getListFunctionAccess().getOpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListFunction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListFunction__Group__2__Impl
	rule__ListFunction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ListFunction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListFunctionAccess().getAliasAssignment_2()); }
	(rule__ListFunction__AliasAssignment_2)
	{ after(grammarAccess.getListFunctionAccess().getAliasAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListFunction__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListFunction__Group__3__Impl
	rule__ListFunction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ListFunction__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListFunctionAccess().getSeparatorAssignment_3()); }
	(rule__ListFunction__SeparatorAssignment_3)
	{ after(grammarAccess.getListFunctionAccess().getSeparatorAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListFunction__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListFunction__Group__4__Impl
	rule__ListFunction__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ListFunction__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListFunctionAccess().getConditionAssignment_4()); }
	(rule__ListFunction__ConditionAssignment_4)
	{ after(grammarAccess.getListFunctionAccess().getConditionAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListFunction__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListFunction__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListFunction__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListFunctionAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getListFunctionAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Reference__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reference__Group__0__Impl
	rule__Reference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceAccess().getNameAssignment_0()); }
	(rule__Reference__NameAssignment_0)
	{ after(grammarAccess.getReferenceAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reference__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceAccess().getPropAssignment_1()); }
	(rule__Reference__PropAssignment_1)?
	{ after(grammarAccess.getReferenceAccess().getPropAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListElementReference__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListElementReference__Group__0__Impl
	rule__ListElementReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListElementReference__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListElementReferenceAccess().getDollarSignKeyword_0()); }
	'$'
	{ after(grammarAccess.getListElementReferenceAccess().getDollarSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListElementReference__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListElementReference__Group__1__Impl
	rule__ListElementReference__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListElementReference__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListElementReferenceAccess().getNameAssignment_1()); }
	(rule__ListElementReference__NameAssignment_1)
	{ after(grammarAccess.getListElementReferenceAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListElementReference__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListElementReference__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListElementReference__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListElementReferenceAccess().getPropAssignment_2()); }
	(rule__ListElementReference__PropAssignment_2)?
	{ after(grammarAccess.getListElementReferenceAccess().getPropAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionAccess__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollectionAccess__Group__0__Impl
	rule__CollectionAccess__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccess__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAccessAccess().getLeftSquareBracketKeyword_0()); }
	'['
	{ after(grammarAccess.getCollectionAccessAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccess__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollectionAccess__Group__1__Impl
	rule__CollectionAccess__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccess__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAccessAccess().getAlternatives_1()); }
	(rule__CollectionAccess__Alternatives_1)
	{ after(grammarAccess.getCollectionAccessAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccess__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollectionAccess__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccess__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAccessAccess().getRightSquareBracketKeyword_2()); }
	']'
	{ after(grammarAccess.getCollectionAccessAccess().getRightSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyRef__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyRef__Group__0__Impl
	rule__PropertyRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyRef__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyRefAccess().getAlternatives_0()); }
	(rule__PropertyRef__Alternatives_0)
	{ after(grammarAccess.getPropertyRefAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyRef__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyRef__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyRef__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyRefAccess().getSubProperyAssignment_1()); }
	(rule__PropertyRef__SubProperyAssignment_1)?
	{ after(grammarAccess.getPropertyRefAccess().getSubProperyAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyRef__Group_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyRef__Group_0_0__0__Impl
	rule__PropertyRef__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyRef__Group_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyRefAccess().getFullStopKeyword_0_0_0()); }
	'.'
	{ after(grammarAccess.getPropertyRefAccess().getFullStopKeyword_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyRef__Group_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyRef__Group_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyRef__Group_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyRefAccess().getPropAccessAssignment_0_0_1()); }
	(rule__PropertyRef__PropAccessAssignment_0_0_1)
	{ after(grammarAccess.getPropertyRefAccess().getPropAccessAssignment_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ResponseConf__UnorderedGroup
	@init {
		int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getResponseConfAccess().getUnorderedGroup());
	}
:
	rule__ResponseConf__UnorderedGroup__0
	?
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getResponseConfAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}

rule__ResponseConf__UnorderedGroup__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
	}
:
		(
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getResponseConfAccess().getUnorderedGroup(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getResponseConfAccess().getUnorderedGroup(), 0);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getResponseConfAccess().getGroup_0()); }
					(rule__ResponseConf__Group_0__0)
					{ after(grammarAccess.getResponseConfAccess().getGroup_0()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getResponseConfAccess().getUnorderedGroup(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getResponseConfAccess().getUnorderedGroup(), 1);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getResponseConfAccess().getGroup_1()); }
					(rule__ResponseConf__Group_1__0)
					{ after(grammarAccess.getResponseConfAccess().getGroup_1()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getResponseConfAccess().getUnorderedGroup(), 2)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getResponseConfAccess().getUnorderedGroup(), 2);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getResponseConfAccess().getGroup_2()); }
					(rule__ResponseConf__Group_2__0)
					{ after(grammarAccess.getResponseConfAccess().getGroup_2()); }
				)
			)
		)
		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getResponseConfAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}

rule__ResponseConf__UnorderedGroup__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ResponseConf__UnorderedGroup__Impl
	rule__ResponseConf__UnorderedGroup__1?
;
finally {
	restoreStackSize(stackSize);
}

rule__ResponseConf__UnorderedGroup__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ResponseConf__UnorderedGroup__Impl
	rule__ResponseConf__UnorderedGroup__2?
;
finally {
	restoreStackSize(stackSize);
}

rule__ResponseConf__UnorderedGroup__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ResponseConf__UnorderedGroup__Impl
;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__ConditionsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getConditionsConditionParserRuleCall_1_0()); }
		ruleCondition
		{ after(grammarAccess.getRuleAccess().getConditionsConditionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__ProxyAssignment_2_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getProxyProxyConfParserRuleCall_2_0_1_0()); }
		ruleProxyConf
		{ after(grammarAccess.getRuleAccess().getProxyProxyConfParserRuleCall_2_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__ResponseAssignment_2_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getResponseResponseConfParserRuleCall_2_1_2_0()); }
		ruleResponseConf
		{ after(grammarAccess.getRuleAccess().getResponseResponseConfParserRuleCall_2_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxyConf__ProxyUrlAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProxyConfAccess().getProxyUrlSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getProxyConfAccess().getProxyUrlSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ResponseConf__HttpStatusAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getResponseConfAccess().getHttpStatusINTEGERTerminalRuleCall_0_1_0()); }
		RULE_INTEGER
		{ after(grammarAccess.getResponseConfAccess().getHttpStatusINTEGERTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ResponseConf__ContentAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getResponseConfAccess().getContentSTRINGTerminalRuleCall_1_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getResponseConfAccess().getContentSTRINGTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ResponseConf__HeadersAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getResponseConfAccess().getHeadersHeadersParserRuleCall_2_1_0()); }
		ruleHeaders
		{ after(grammarAccess.getResponseConfAccess().getHeadersHeadersParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Headers__HeadersAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHeadersAccess().getHeadersHeaderParserRuleCall_0_0()); }
		ruleHeader
		{ after(grammarAccess.getHeadersAccess().getHeadersHeaderParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Headers__HeadersAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHeadersAccess().getHeadersHeaderParserRuleCall_1_1_0()); }
		ruleHeader
		{ after(grammarAccess.getHeadersAccess().getHeadersHeaderParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__HeaderNameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHeaderAccess().getHeaderNameSTRINGTerminalRuleCall_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getHeaderAccess().getHeaderNameSTRINGTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__HeaderValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHeaderAccess().getHeaderValueSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getHeaderAccess().getHeaderValueSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrCondition__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrConditionAccess().getRightAndConditionParserRuleCall_1_2_0()); }
		ruleAndCondition
		{ after(grammarAccess.getOrConditionAccess().getRightAndConditionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndCondition__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndConditionAccess().getRightOptionalNegationConditionParserRuleCall_1_2_0()); }
		ruleOptionalNegationCondition
		{ after(grammarAccess.getAndConditionAccess().getRightOptionalNegationConditionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptionalNegationCondition__NegatedAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptionalNegationConditionAccess().getNegatedBracketedConditionParserRuleCall_1_2_0()); }
		ruleBracketedCondition
		{ after(grammarAccess.getOptionalNegationConditionAccess().getNegatedBracketedConditionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BracketedCondition__ExpressionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBracketedConditionAccess().getExpressionExpressionParserRuleCall_0_0()); }
		ruleExpression
		{ after(grammarAccess.getBracketedConditionAccess().getExpressionExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BracketedCondition__ConditionAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBracketedConditionAccess().getConditionConditionParserRuleCall_1_1_0()); }
		ruleCondition
		{ after(grammarAccess.getBracketedConditionAccess().getConditionConditionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__LeftAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getLeftOperandParserRuleCall_0_0()); }
		ruleOperand
		{ after(grammarAccess.getExpressionAccess().getLeftOperandParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__OpAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getOpOperatorEnumRuleCall_1_0_0()); }
		ruleOperator
		{ after(grammarAccess.getExpressionAccess().getOpOperatorEnumRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getRightOperandParserRuleCall_1_1_0()); }
		ruleOperand
		{ after(grammarAccess.getExpressionAccess().getRightOperandParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__RefAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperandAccess().getRefReferenceParserRuleCall_0_0()); }
		ruleReference
		{ after(grammarAccess.getOperandAccess().getRefReferenceParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__ConstAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperandAccess().getConstConstantParserRuleCall_1_0()); }
		ruleConstant
		{ after(grammarAccess.getOperandAccess().getConstConstantParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__ListElementRefAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperandAccess().getListElementRefListElementReferenceParserRuleCall_2_0()); }
		ruleListElementReference
		{ after(grammarAccess.getOperandAccess().getListElementRefListElementReferenceParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListFunction__OpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListFunctionAccess().getOpListOperationEnumRuleCall_1_0()); }
		ruleListOperation
		{ after(grammarAccess.getListFunctionAccess().getOpListOperationEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListFunction__AliasAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListFunctionAccess().getAliasListElementAliasParserRuleCall_2_0()); }
		ruleListElementAlias
		{ after(grammarAccess.getListFunctionAccess().getAliasListElementAliasParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListFunction__SeparatorAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListFunctionAccess().getSeparatorColonKeyword_3_0()); }
		(
			{ before(grammarAccess.getListFunctionAccess().getSeparatorColonKeyword_3_0()); }
			':'
			{ after(grammarAccess.getListFunctionAccess().getSeparatorColonKeyword_3_0()); }
		)
		{ after(grammarAccess.getListFunctionAccess().getSeparatorColonKeyword_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListFunction__ConditionAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListFunctionAccess().getConditionConditionParserRuleCall_4_0()); }
		ruleCondition
		{ after(grammarAccess.getListFunctionAccess().getConditionConditionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListElementAlias__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListElementAliasAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getListElementAliasAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReferenceAccess().getNameEntityParserRuleCall_0_0()); }
		ruleEntity
		{ after(grammarAccess.getReferenceAccess().getNameEntityParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__PropAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReferenceAccess().getPropPropertyRefParserRuleCall_1_0()); }
		rulePropertyRef
		{ after(grammarAccess.getReferenceAccess().getPropPropertyRefParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListElementReference__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListElementReferenceAccess().getNameListElementAliasCrossReference_1_0()); }
		(
			{ before(grammarAccess.getListElementReferenceAccess().getNameListElementAliasIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getListElementReferenceAccess().getNameListElementAliasIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getListElementReferenceAccess().getNameListElementAliasCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListElementReference__PropAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListElementReferenceAccess().getPropPropertyRefParserRuleCall_2_0()); }
		rulePropertyRef
		{ after(grammarAccess.getListElementReferenceAccess().getPropPropertyRefParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAccess__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyAccessAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getPropertyAccessAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccess__KeyAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCollectionAccessAccess().getKeySTRINGTerminalRuleCall_1_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getCollectionAccessAccess().getKeySTRINGTerminalRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccess__IndexAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCollectionAccessAccess().getIndexINTEGERTerminalRuleCall_1_1_0()); }
		RULE_INTEGER
		{ after(grammarAccess.getCollectionAccessAccess().getIndexINTEGERTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyRef__PropAccessAssignment_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyRefAccess().getPropAccessPropertyAccessParserRuleCall_0_0_1_0()); }
		rulePropertyAccess
		{ after(grammarAccess.getPropertyRefAccess().getPropAccessPropertyAccessParserRuleCall_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyRef__CollectionAccessAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyRefAccess().getCollectionAccessCollectionAccessParserRuleCall_0_1_0()); }
		ruleCollectionAccess
		{ after(grammarAccess.getPropertyRefAccess().getCollectionAccessCollectionAccessParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyRef__ListFuncAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyRefAccess().getListFuncListFunctionParserRuleCall_0_2_0()); }
		ruleListFunction
		{ after(grammarAccess.getPropertyRefAccess().getListFuncListFunctionParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyRef__SubProperyAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyRefAccess().getSubProperyPropertyRefParserRuleCall_1_0()); }
		rulePropertyRef
		{ after(grammarAccess.getPropertyRefAccess().getSubProperyPropertyRefParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__StrValAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantAccess().getStrValSTRINGTerminalRuleCall_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getConstantAccess().getStrValSTRINGTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__IntValAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantAccess().getIntValINTEGERTerminalRuleCall_1_0()); }
		RULE_INTEGER
		{ after(grammarAccess.getConstantAccess().getIntValINTEGERTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__FloatValAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantAccess().getFloatValFLOATTerminalRuleCall_2_0()); }
		RULE_FLOAT
		{ after(grammarAccess.getConstantAccess().getFloatValFLOATTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__BoolValAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantAccess().getBoolValBOOLEANTerminalRuleCall_3_0()); }
		RULE_BOOLEAN
		{ after(grammarAccess.getConstantAccess().getBoolValBOOLEANTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_BOOLEAN : ('true'|'false');

RULE_FLOAT : RULE_INTEGER '.' RULE_INTEGER;

RULE_INTEGER : ('0'..'9')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;
