/*
 * generated by Xtext 2.25.0
 */
package x.mvmn.permock.dsl.scoping;

import java.util.Arrays;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.util.IResourceScopeCache;

import com.google.inject.Inject;

import x.mvmn.permock.dsl.dsl.ListElementReference;
import x.mvmn.permock.dsl.dsl.ListFunction;

/**
 * This class contains custom scoping description.
 * 
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class DslScopeProvider extends AbstractDslScopeProvider {

	@Inject
	IResourceScopeCache scopeCache;

	@Override
	public IScope getScope(EObject context, EReference reference) {
		if (context instanceof ListElementReference) {
			ListElementReference listElemRef = (ListElementReference) context;
			ListFunction container = EcoreUtil2.getContainerOfType(listElemRef, ListFunction.class);
			return container != null && container.getAlias() != null
					? Scopes.scopeFor(Arrays.asList(container.getAlias()), getParentScope(container))
					: getParentScope(container);
		} else {
			return super.getScope(context, reference);
		}
	}

	protected IScope getParentScope(ListFunction container) {
		IScope result = IScope.NULLSCOPE;
		if (container != null) {
			ListFunction parentContainer = EcoreUtil2.getContainerOfType(container.eContainer(), ListFunction.class);
			if (parentContainer != null) {
				String path = EcoreUtil2.getFragmentPath(parentContainer.getAlias());
				result = scopeCache.get(path, container.eResource(), () -> Scopes
						.scopeFor(Arrays.asList(parentContainer.getAlias()), getParentScope(parentContainer)));
			}
		}
		return result;
	}
}
