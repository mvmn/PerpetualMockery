/*
 * generated by Xtext 2.25.0
 */
package x.mvmn.permock.dsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import x.mvmn.permock.dsl.services.DslGrammarAccess;

@SuppressWarnings("all")
public class DslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected DslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ResponseConf_HeadersKeyword_2_0_a;
	protected AbstractElementAlias match_ResponseConf_HeadersKeyword_2_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (DslGrammarAccess) access;
		match_ResponseConf_HeadersKeyword_2_0_a = new TokenAlias(true, true, grammarAccess.getResponseConfAccess().getHeadersKeyword_2_0());
		match_ResponseConf_HeadersKeyword_2_0_p = new TokenAlias(true, false, grammarAccess.getResponseConfAccess().getHeadersKeyword_2_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ResponseConf_HeadersKeyword_2_0_a.equals(syntax))
				emit_ResponseConf_HeadersKeyword_2_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ResponseConf_HeadersKeyword_2_0_p.equals(syntax))
				emit_ResponseConf_HeadersKeyword_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'headers'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'content' content=STRING
	 *     (rule start) (ambiguity) 'status' httpStatus=INTEGER
	 *     (rule start) (ambiguity) (rule start)
	 *     content=STRING (ambiguity) 'content' content=STRING
	 *     content=STRING (ambiguity) 'status' httpStatus=INTEGER
	 *     content=STRING (ambiguity) (rule end)
	 *     headers=Headers (ambiguity) 'content' content=STRING
	 *     headers=Headers (ambiguity) 'status' httpStatus=INTEGER
	 *     headers=Headers (ambiguity) (rule end)
	 *     httpStatus=INTEGER (ambiguity) 'content' content=STRING
	 *     httpStatus=INTEGER (ambiguity) 'status' httpStatus=INTEGER
	 *     httpStatus=INTEGER (ambiguity) (rule end)
	 */
	protected void emit_ResponseConf_HeadersKeyword_2_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'headers'+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) headers=Headers
	 *     content=STRING (ambiguity) headers=Headers
	 *     headers=Headers (ambiguity) headers=Headers
	 *     httpStatus=INTEGER (ambiguity) headers=Headers
	 */
	protected void emit_ResponseConf_HeadersKeyword_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
