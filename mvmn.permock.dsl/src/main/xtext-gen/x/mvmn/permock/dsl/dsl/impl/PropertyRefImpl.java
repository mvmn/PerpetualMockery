/**
 * generated by Xtext 2.25.0
 */
package x.mvmn.permock.dsl.dsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import x.mvmn.permock.dsl.dsl.CollectionAccess;
import x.mvmn.permock.dsl.dsl.DslPackage;
import x.mvmn.permock.dsl.dsl.ListFunction;
import x.mvmn.permock.dsl.dsl.PropertyAccess;
import x.mvmn.permock.dsl.dsl.PropertyRef;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Property Ref</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link x.mvmn.permock.dsl.dsl.impl.PropertyRefImpl#getPropAccess <em>Prop Access</em>}</li>
 *   <li>{@link x.mvmn.permock.dsl.dsl.impl.PropertyRefImpl#getCollectionAccess <em>Collection Access</em>}</li>
 *   <li>{@link x.mvmn.permock.dsl.dsl.impl.PropertyRefImpl#getListFunc <em>List Func</em>}</li>
 *   <li>{@link x.mvmn.permock.dsl.dsl.impl.PropertyRefImpl#getSubPropery <em>Sub Propery</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PropertyRefImpl extends MinimalEObjectImpl.Container implements PropertyRef
{
  /**
   * The cached value of the '{@link #getPropAccess() <em>Prop Access</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPropAccess()
   * @generated
   * @ordered
   */
  protected PropertyAccess propAccess;

  /**
   * The cached value of the '{@link #getCollectionAccess() <em>Collection Access</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCollectionAccess()
   * @generated
   * @ordered
   */
  protected CollectionAccess collectionAccess;

  /**
   * The cached value of the '{@link #getListFunc() <em>List Func</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getListFunc()
   * @generated
   * @ordered
   */
  protected ListFunction listFunc;

  /**
   * The cached value of the '{@link #getSubPropery() <em>Sub Propery</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSubPropery()
   * @generated
   * @ordered
   */
  protected PropertyRef subPropery;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PropertyRefImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.Literals.PROPERTY_REF;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyAccess getPropAccess()
  {
    return propAccess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPropAccess(PropertyAccess newPropAccess, NotificationChain msgs)
  {
    PropertyAccess oldPropAccess = propAccess;
    propAccess = newPropAccess;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.PROPERTY_REF__PROP_ACCESS, oldPropAccess, newPropAccess);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPropAccess(PropertyAccess newPropAccess)
  {
    if (newPropAccess != propAccess)
    {
      NotificationChain msgs = null;
      if (propAccess != null)
        msgs = ((InternalEObject)propAccess).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.PROPERTY_REF__PROP_ACCESS, null, msgs);
      if (newPropAccess != null)
        msgs = ((InternalEObject)newPropAccess).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.PROPERTY_REF__PROP_ACCESS, null, msgs);
      msgs = basicSetPropAccess(newPropAccess, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.PROPERTY_REF__PROP_ACCESS, newPropAccess, newPropAccess));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CollectionAccess getCollectionAccess()
  {
    return collectionAccess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCollectionAccess(CollectionAccess newCollectionAccess, NotificationChain msgs)
  {
    CollectionAccess oldCollectionAccess = collectionAccess;
    collectionAccess = newCollectionAccess;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.PROPERTY_REF__COLLECTION_ACCESS, oldCollectionAccess, newCollectionAccess);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCollectionAccess(CollectionAccess newCollectionAccess)
  {
    if (newCollectionAccess != collectionAccess)
    {
      NotificationChain msgs = null;
      if (collectionAccess != null)
        msgs = ((InternalEObject)collectionAccess).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.PROPERTY_REF__COLLECTION_ACCESS, null, msgs);
      if (newCollectionAccess != null)
        msgs = ((InternalEObject)newCollectionAccess).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.PROPERTY_REF__COLLECTION_ACCESS, null, msgs);
      msgs = basicSetCollectionAccess(newCollectionAccess, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.PROPERTY_REF__COLLECTION_ACCESS, newCollectionAccess, newCollectionAccess));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ListFunction getListFunc()
  {
    return listFunc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetListFunc(ListFunction newListFunc, NotificationChain msgs)
  {
    ListFunction oldListFunc = listFunc;
    listFunc = newListFunc;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.PROPERTY_REF__LIST_FUNC, oldListFunc, newListFunc);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setListFunc(ListFunction newListFunc)
  {
    if (newListFunc != listFunc)
    {
      NotificationChain msgs = null;
      if (listFunc != null)
        msgs = ((InternalEObject)listFunc).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.PROPERTY_REF__LIST_FUNC, null, msgs);
      if (newListFunc != null)
        msgs = ((InternalEObject)newListFunc).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.PROPERTY_REF__LIST_FUNC, null, msgs);
      msgs = basicSetListFunc(newListFunc, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.PROPERTY_REF__LIST_FUNC, newListFunc, newListFunc));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyRef getSubPropery()
  {
    return subPropery;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSubPropery(PropertyRef newSubPropery, NotificationChain msgs)
  {
    PropertyRef oldSubPropery = subPropery;
    subPropery = newSubPropery;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.PROPERTY_REF__SUB_PROPERY, oldSubPropery, newSubPropery);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSubPropery(PropertyRef newSubPropery)
  {
    if (newSubPropery != subPropery)
    {
      NotificationChain msgs = null;
      if (subPropery != null)
        msgs = ((InternalEObject)subPropery).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.PROPERTY_REF__SUB_PROPERY, null, msgs);
      if (newSubPropery != null)
        msgs = ((InternalEObject)newSubPropery).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.PROPERTY_REF__SUB_PROPERY, null, msgs);
      msgs = basicSetSubPropery(newSubPropery, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.PROPERTY_REF__SUB_PROPERY, newSubPropery, newSubPropery));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslPackage.PROPERTY_REF__PROP_ACCESS:
        return basicSetPropAccess(null, msgs);
      case DslPackage.PROPERTY_REF__COLLECTION_ACCESS:
        return basicSetCollectionAccess(null, msgs);
      case DslPackage.PROPERTY_REF__LIST_FUNC:
        return basicSetListFunc(null, msgs);
      case DslPackage.PROPERTY_REF__SUB_PROPERY:
        return basicSetSubPropery(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.PROPERTY_REF__PROP_ACCESS:
        return getPropAccess();
      case DslPackage.PROPERTY_REF__COLLECTION_ACCESS:
        return getCollectionAccess();
      case DslPackage.PROPERTY_REF__LIST_FUNC:
        return getListFunc();
      case DslPackage.PROPERTY_REF__SUB_PROPERY:
        return getSubPropery();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.PROPERTY_REF__PROP_ACCESS:
        setPropAccess((PropertyAccess)newValue);
        return;
      case DslPackage.PROPERTY_REF__COLLECTION_ACCESS:
        setCollectionAccess((CollectionAccess)newValue);
        return;
      case DslPackage.PROPERTY_REF__LIST_FUNC:
        setListFunc((ListFunction)newValue);
        return;
      case DslPackage.PROPERTY_REF__SUB_PROPERY:
        setSubPropery((PropertyRef)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.PROPERTY_REF__PROP_ACCESS:
        setPropAccess((PropertyAccess)null);
        return;
      case DslPackage.PROPERTY_REF__COLLECTION_ACCESS:
        setCollectionAccess((CollectionAccess)null);
        return;
      case DslPackage.PROPERTY_REF__LIST_FUNC:
        setListFunc((ListFunction)null);
        return;
      case DslPackage.PROPERTY_REF__SUB_PROPERY:
        setSubPropery((PropertyRef)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.PROPERTY_REF__PROP_ACCESS:
        return propAccess != null;
      case DslPackage.PROPERTY_REF__COLLECTION_ACCESS:
        return collectionAccess != null;
      case DslPackage.PROPERTY_REF__LIST_FUNC:
        return listFunc != null;
      case DslPackage.PROPERTY_REF__SUB_PROPERY:
        return subPropery != null;
    }
    return super.eIsSet(featureID);
  }

} //PropertyRefImpl
