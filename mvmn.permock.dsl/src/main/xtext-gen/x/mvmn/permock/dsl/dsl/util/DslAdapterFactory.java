/**
 * generated by Xtext 2.25.0
 */
package x.mvmn.permock.dsl.dsl.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import x.mvmn.permock.dsl.dsl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see x.mvmn.permock.dsl.dsl.DslPackage
 * @generated
 */
public class DslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static DslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = DslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DslSwitch<Adapter> modelSwitch =
    new DslSwitch<Adapter>()
    {
      @Override
      public Adapter caseRule(Rule object)
      {
        return createRuleAdapter();
      }
      @Override
      public Adapter caseProxyConf(ProxyConf object)
      {
        return createProxyConfAdapter();
      }
      @Override
      public Adapter caseResponseConf(ResponseConf object)
      {
        return createResponseConfAdapter();
      }
      @Override
      public Adapter caseHeaders(Headers object)
      {
        return createHeadersAdapter();
      }
      @Override
      public Adapter caseHeader(Header object)
      {
        return createHeaderAdapter();
      }
      @Override
      public Adapter caseCondition(Condition object)
      {
        return createConditionAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseOperand(Operand object)
      {
        return createOperandAdapter();
      }
      @Override
      public Adapter caseListFunction(ListFunction object)
      {
        return createListFunctionAdapter();
      }
      @Override
      public Adapter caseListElementAlias(ListElementAlias object)
      {
        return createListElementAliasAdapter();
      }
      @Override
      public Adapter caseReference(Reference object)
      {
        return createReferenceAdapter();
      }
      @Override
      public Adapter caseListElementReference(ListElementReference object)
      {
        return createListElementReferenceAdapter();
      }
      @Override
      public Adapter casePropertyAccess(PropertyAccess object)
      {
        return createPropertyAccessAdapter();
      }
      @Override
      public Adapter caseCollectionAccess(CollectionAccess object)
      {
        return createCollectionAccessAdapter();
      }
      @Override
      public Adapter casePropertyRef(PropertyRef object)
      {
        return createPropertyRefAdapter();
      }
      @Override
      public Adapter caseConstant(Constant object)
      {
        return createConstantAdapter();
      }
      @Override
      public Adapter caseEntity(Entity object)
      {
        return createEntityAdapter();
      }
      @Override
      public Adapter caseOrCondition(OrCondition object)
      {
        return createOrConditionAdapter();
      }
      @Override
      public Adapter caseAndCondition(AndCondition object)
      {
        return createAndConditionAdapter();
      }
      @Override
      public Adapter caseNegation(Negation object)
      {
        return createNegationAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link x.mvmn.permock.dsl.dsl.Rule <em>Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see x.mvmn.permock.dsl.dsl.Rule
   * @generated
   */
  public Adapter createRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link x.mvmn.permock.dsl.dsl.ProxyConf <em>Proxy Conf</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see x.mvmn.permock.dsl.dsl.ProxyConf
   * @generated
   */
  public Adapter createProxyConfAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link x.mvmn.permock.dsl.dsl.ResponseConf <em>Response Conf</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see x.mvmn.permock.dsl.dsl.ResponseConf
   * @generated
   */
  public Adapter createResponseConfAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link x.mvmn.permock.dsl.dsl.Headers <em>Headers</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see x.mvmn.permock.dsl.dsl.Headers
   * @generated
   */
  public Adapter createHeadersAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link x.mvmn.permock.dsl.dsl.Header <em>Header</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see x.mvmn.permock.dsl.dsl.Header
   * @generated
   */
  public Adapter createHeaderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link x.mvmn.permock.dsl.dsl.Condition <em>Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see x.mvmn.permock.dsl.dsl.Condition
   * @generated
   */
  public Adapter createConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link x.mvmn.permock.dsl.dsl.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see x.mvmn.permock.dsl.dsl.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link x.mvmn.permock.dsl.dsl.Operand <em>Operand</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see x.mvmn.permock.dsl.dsl.Operand
   * @generated
   */
  public Adapter createOperandAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link x.mvmn.permock.dsl.dsl.ListFunction <em>List Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see x.mvmn.permock.dsl.dsl.ListFunction
   * @generated
   */
  public Adapter createListFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link x.mvmn.permock.dsl.dsl.ListElementAlias <em>List Element Alias</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see x.mvmn.permock.dsl.dsl.ListElementAlias
   * @generated
   */
  public Adapter createListElementAliasAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link x.mvmn.permock.dsl.dsl.Reference <em>Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see x.mvmn.permock.dsl.dsl.Reference
   * @generated
   */
  public Adapter createReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link x.mvmn.permock.dsl.dsl.ListElementReference <em>List Element Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see x.mvmn.permock.dsl.dsl.ListElementReference
   * @generated
   */
  public Adapter createListElementReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link x.mvmn.permock.dsl.dsl.PropertyAccess <em>Property Access</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see x.mvmn.permock.dsl.dsl.PropertyAccess
   * @generated
   */
  public Adapter createPropertyAccessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link x.mvmn.permock.dsl.dsl.CollectionAccess <em>Collection Access</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see x.mvmn.permock.dsl.dsl.CollectionAccess
   * @generated
   */
  public Adapter createCollectionAccessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link x.mvmn.permock.dsl.dsl.PropertyRef <em>Property Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see x.mvmn.permock.dsl.dsl.PropertyRef
   * @generated
   */
  public Adapter createPropertyRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link x.mvmn.permock.dsl.dsl.Constant <em>Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see x.mvmn.permock.dsl.dsl.Constant
   * @generated
   */
  public Adapter createConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link x.mvmn.permock.dsl.dsl.Entity <em>Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see x.mvmn.permock.dsl.dsl.Entity
   * @generated
   */
  public Adapter createEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link x.mvmn.permock.dsl.dsl.OrCondition <em>Or Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see x.mvmn.permock.dsl.dsl.OrCondition
   * @generated
   */
  public Adapter createOrConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link x.mvmn.permock.dsl.dsl.AndCondition <em>And Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see x.mvmn.permock.dsl.dsl.AndCondition
   * @generated
   */
  public Adapter createAndConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link x.mvmn.permock.dsl.dsl.Negation <em>Negation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see x.mvmn.permock.dsl.dsl.Negation
   * @generated
   */
  public Adapter createNegationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //DslAdapterFactory
