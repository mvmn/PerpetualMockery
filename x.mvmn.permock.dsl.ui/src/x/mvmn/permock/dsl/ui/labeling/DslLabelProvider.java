/*
 * generated by Xtext 2.25.0
 */
package x.mvmn.permock.dsl.ui.labeling;

import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

import com.google.inject.Inject;

import x.mvmn.permock.dsl.dsl.AndCondition;
import x.mvmn.permock.dsl.dsl.CollectionAccess;
import x.mvmn.permock.dsl.dsl.Condition;
import x.mvmn.permock.dsl.dsl.Constant;
import x.mvmn.permock.dsl.dsl.Expression;
import x.mvmn.permock.dsl.dsl.Negation;
import x.mvmn.permock.dsl.dsl.OrCondition;
import x.mvmn.permock.dsl.dsl.PropertyAccess;
import x.mvmn.permock.dsl.dsl.Reference;

/**
 * Provides labels for EObjects.
 * 
 * See
 * https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#label-provider
 */
public class DslLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public DslLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	public String text(AndCondition el) {
		return "and";
	}

	public String text(OrCondition el) {
		return "or";
	}

	public String text(Expression ex) {
		return ex.getOp().getLiteral();
	}

	public String text(Reference ref) {
		return ref.getName().getName();
	}

	public String text(Negation neg) {
		return "not";
	}

	public String text(PropertyAccess propertyAccess) {
		return propertyAccess.getName();
	}

	public String text(CollectionAccess collectionAccess) {
		if (collectionAccess.getIndex() != null)
			return "[" + collectionAccess.getIndex().toString() + "]";
		if (collectionAccess.getKey() != null) {
			return "['" + collectionAccess.getKey() + "']";
		}
		return null;
	}

	public String text(Condition cnd) {
		return (cnd.getCondition() != null || cnd.getExpression() != null) ? "()" : null;
	}

	public String text(Constant val) {
		if (val.getStrVal() != null)
			return val.getStrVal();
		if (val.getIntVal() != null)
			return val.getIntVal().toString();
		if (val.getFloatVal() != null)
			return val.getFloatVal().toString();
		return null;
	}
}
