/*
 * generated by Xtext 2.25.0
 */
package x.mvmn.permock.dsl.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import x.mvmn.permock.dsl.dsl.Rule

@ExtendWith(InjectionExtension)
@InjectWith(DslInjectorProvider)
class DslParsingTest {
	@Inject
	ParseHelper<Rule> parseHelper
	
	@Test
	def void testParse() {
		val result = parseHelper.parse('''
			if
				httpHeaders{
						any header:
					$header.name = 'MockMe' and $header.value = 'false'
				}.isNotEmpty or path ~= "/mockery/.*" and httpMethod = 'GET'
			respond with
				status 302
				content 'asdasd'
				headers
					'Location': 'https://www.google.com',
					'Test': "blah blah test"
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
}
